# 使用Node.js 22.19.0作为基础镜像
# 选择特定版本以确保构建的一致性和可重现性
FROM node:22.19.0

# 设置工作目录
# 所有后续命令将在/app目录下执行
WORKDIR /app

# 设置环境变量
# 明确指定为生产环境，优化性能和安全性
ENV NODE_ENV=production \
    DB_HOST=mysql \
    DB_USER=root \
    DB_PASSWORD=rootpassword \
    DB_NAME=tech_company \
    DB_PORT=3306 \
    PORT=3001 \
    IS_DOCKER=true

# 复制package.json和package-lock.json
# 先复制依赖文件，以便利用Docker缓存机制
# 只有当package.json或package-lock.json发生变化时才重新安装依赖
COPY package*.json ./

# 安装生产依赖
# --only=production: 确保只安装生产环境所需的依赖
# --no-optional: 减少安装的包数量，减小镜像体积
# --no-audit: 禁用审计功能，加快安装速度
# --progress=false: 禁用进度条，使输出更清晰
RUN npm install --only=production --no-optional --no-audit --progress=false

# 创建非root用户用于运行应用（安全最佳实践）
# 避免以root用户运行容器，提高安全性
# 使用固定UID/GID (1001) 便于管理和权限控制
RUN groupadd --gid 1001 --non-unique nodejs && \
    useradd --uid 1001 --gid nodejs --shell /bin/bash --create-home nodejs

# 将工作目录所有权转移给nodejs用户
# 在切换用户之前设置好权限
RUN chown -R nodejs:nodejs /app

# 切换到非root用户
# 后续所有操作都将以nodejs用户身份执行
USER nodejs

# 复制后端源代码
# 使用--chown标志确保文件归nodejs用户所有
# 将本地backend目录复制到容器中的/backend目录
COPY --chown=nodejs:nodejs backend ./backend

# 暴露端口
# 声明容器在运行时监听的端口
# 这是一个文档性声明，实际还需要在运行容器时通过-p参数映射端口
EXPOSE 3001

# 启动应用
# 使用JSON数组格式的CMD指令，更加清晰可靠
# 启动backend目录下的主应用文件
CMD ["node", "backend/app.js"]